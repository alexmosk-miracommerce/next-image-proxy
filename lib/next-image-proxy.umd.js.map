{"version":3,"file":"next-image-proxy.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport fetch from 'isomorphic-unfetch'\nimport stream, { Stream } from 'stream'\nimport merge from 'lodash.merge'\nimport UserAgent from 'user-agents'\nimport { DeepPartial, Options } from './types'\n\nexport function withImageProxy(passedOptions?: DeepPartial<Options>) {\n  const defaultOptions: Options = {\n    whitelistedPatterns: [],\n    fallbackUrl: '',\n    messages: {\n      wrongFormat: 'Image url not provided or has wrong format',\n      notWhitelisted: 'Provided image url is not whitelisted',\n      imageFetchError: \"Couldn't fetch the image\",\n    },\n  }\n\n  const options: Options = merge(defaultOptions, passedOptions)\n\n  return async function (req: NextApiRequest, res: NextApiResponse) {\n    const url = new URL(req.query.imageUrl as string);\n\n    Object.keys(req.query).map((key) =>\n      url.searchParams.append(key, req.query[key] as string),\n    );\n\n    const imageUrl = url.href;\n\n    if (!imageUrl || (imageUrl && Array.isArray(imageUrl))) {\n      res.status(400).send({ message: options.messages.wrongFormat })\n      return\n    }\n\n    const isAllowed = isUrlWhitelisted(imageUrl, options.whitelistedPatterns)\n\n    if (!isAllowed) {\n      res.status(422).send({ message: options.messages.notWhitelisted })\n      return\n    }\n\n    const imageBlob = await fetchImageBlob(imageUrl)\n\n    if (!imageBlob) {\n      handleFallback(res, options)\n      return\n    }\n\n    pipeImage(res, imageBlob, options)\n  }\n}\n\nfunction pipeImage(res: NextApiResponse, imageBlob: ReadableStream<Uint8Array>, options: Options) {\n  const passThrough = new Stream.PassThrough()\n\n  stream.pipeline(imageBlob as unknown as NodeJS.ReadableStream, passThrough, (err) => {\n    if (err) {\n      console.log(err)\n      handleFallback(res, options)\n      return\n    }\n  })\n  passThrough.pipe(res)\n}\n\nfunction handleFallback(res: NextApiResponse, options: Options) {\n  if (options.fallbackUrl.trim()) {\n    res.redirect(options.fallbackUrl)\n  } else {\n    res.status(422).send({ message: options.messages.imageFetchError })\n  }\n}\n\nasync function fetchImageBlob(url: string) {\n  return await fetch(url, {\n    headers: { 'user-agent': new UserAgent().toString() },\n  }).then((data) => data.body)\n}\n\nfunction isUrlWhitelisted(url: string, whitelistedPatterns: Options['whitelistedPatterns']) {\n  return whitelistedPatterns.some((singleHost) => {\n    return url.match(singleHost)\n  })\n}\n"],"names":["handleFallback","res","options","fallbackUrl","trim","redirect","status","send","message","messages","imageFetchError","passedOptions","merge","whitelistedPatterns","wrongFormat","notWhitelisted","req","url","URL","query","imageUrl","Object","keys","map","key","searchParams","append","href","Array","isArray","isAllowed","some","singleHost","match","isUrlWhitelisted","fetch","headers","UserAgent","toString","then","data","body","fetchImageBlob","imageBlob","passThrough","Stream","PassThrough","stream","pipeline","err","console","log","pipe","pipeImage"],"mappings":"oiBAiEA,SAASA,EAAeC,EAAsBC,GACxCA,EAAQC,YAAYC,OACtBH,EAAII,SAASH,EAAQC,aAErBF,EAAIK,OAAO,KAAKC,KAAK,CAAEC,QAASN,EAAQO,SAASC,4CA9DtBC,GAC7B,IAUMT,EAAmBU,UAVO,CAC9BC,oBAAqB,GACrBV,YAAa,GACbM,SAAU,CACRK,YAAa,6CACbC,eAAgB,wCAChBL,gBAAiB,6BAI0BC,GAE/C,gBAAuBK,EAAqBf,OAC1C,IAAMgB,EAAM,IAAIC,IAAIF,EAAIG,MAAMC,UAE9BC,OAAOC,KAAKN,EAAIG,OAAOI,IAAI,SAACC,UAC1BP,EAAIQ,aAAaC,OAAOF,EAAKR,EAAIG,MAAMK,MAGzC,IAAMJ,EAAWH,EAAIU,KAErB,IAAKP,GAAaA,GAAYQ,MAAMC,QAAQT,GAE1C,OADAnB,EAAIK,OAAO,KAAKC,KAAK,CAAEC,QAASN,EAAQO,SAASK,gCAInD,IAAMgB,EA6CV,SAA0Bb,EAAaJ,GACrC,OAAOA,EAAoBkB,KAAK,SAACC,GAC/B,OAAOf,EAAIgB,MAAMD,KA/CCE,CAAiBd,EAAUlB,EAAQW,qBAErD,OAAKiB,2BAqCqBb,8BACfkB,UAAMlB,EAAK,CACtBmB,QAAS,CAAE,cAAc,IAAIC,WAAYC,cACxCC,KAAK,SAACC,UAASA,EAAKC,2CAnCGC,CAAetB,kBAAjCuB,GAEDA,EAST,SAAmB1C,EAAsB0C,EAAuCzC,GAC9E,IAAM0C,EAAc,IAAIC,SAAOC,YAE/BC,UAAOC,SAASL,EAA+CC,EAAa,SAACK,GAC3E,GAAIA,EAGF,OAFAC,QAAQC,IAAIF,QACZjD,EAAeC,EAAKC,KAIxB0C,EAAYQ,KAAKnD,GAdfoD,CAAUpD,EAAK0C,EAAWzC,GAJxBF,EAAeC,EAAKC,MAPpBD,EAAIK,OAAO,KAAKC,KAAK,CAAEC,QAASN,EAAQO,SAASM,oCAjBrD"}