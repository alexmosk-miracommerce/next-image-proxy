import e from"isomorphic-unfetch";import r,{Stream as t}from"stream";import s from"lodash.merge";import n from"user-agents";function o(o){var a=s({whitelistedPatterns:[],fallbackUrl:"",messages:{wrongFormat:"Image url not provided or has wrong format",notWhitelisted:"Provided image url is not whitelisted",imageFetchError:"Couldn't fetch the image"}},o);return function(s,o){try{var m=new URL(s.query.imageUrl);Object.keys(s.query).map(function(e){return m.searchParams.append(e,s.query[e])});var u=m.href;if(!u||u&&Array.isArray(u))return o.status(400).send({message:a.messages.wrongFormat}),Promise.resolve();var c=function(e,r){return r.some(function(r){return e.match(r)})}(u,a.whitelistedPatterns);return c?Promise.resolve(function(r){try{return Promise.resolve(e(r,{headers:{"user-agent":(new n).toString()}}).then(function(e){return e.body}))}catch(e){return Promise.reject(e)}}(u)).then(function(e){e?function(e,s,n){var o=new t.PassThrough;r.pipeline(s,o,function(r){if(r)return console.log(r),void i(e,n)}),o.pipe(e)}(o,e,a):i(o,a)}):(o.status(422).send({message:a.messages.notWhitelisted}),Promise.resolve())}catch(e){return Promise.reject(e)}}}function i(e,r){r.fallbackUrl.trim()?e.redirect(r.fallbackUrl):e.status(422).send({message:r.messages.imageFetchError})}export{o as withImageProxy};
//# sourceMappingURL=next-image-proxy.module.js.map
