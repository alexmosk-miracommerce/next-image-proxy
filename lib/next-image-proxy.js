var e=require("isomorphic-unfetch"),r=require("stream"),t=require("lodash.merge"),n=require("user-agents");function s(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var a=s(e),i=s(r),o=s(t),u=s(n);function c(e,r){r.fallbackUrl.trim()?e.redirect(r.fallbackUrl):e.status(422).send({message:r.messages.imageFetchError})}exports.withImageProxy=function(e){var t=o.default({whitelistedPatterns:[],fallbackUrl:"",messages:{wrongFormat:"Image url not provided or has wrong format",notWhitelisted:"Provided image url is not whitelisted",imageFetchError:"Couldn't fetch the image"}},e);return function(e,n){try{var s=new URL(e.query.imageUrl);Object.keys(e.query).map(function(r){return s.searchParams.append(r,e.query[r])});var o=s.href;if(!o||o&&Array.isArray(o))return n.status(400).send({message:t.messages.wrongFormat}),Promise.resolve();var l=function(e,r){return r.some(function(r){return e.match(r)})}(o,t.whitelistedPatterns);return l?Promise.resolve(function(e){try{return Promise.resolve(a.default(e,{headers:{"user-agent":(new u.default).toString()}}).then(function(e){return e.body}))}catch(e){return Promise.reject(e)}}(o)).then(function(e){e?function(e,t,n){var s=new r.Stream.PassThrough;i.default.pipeline(t,s,function(r){if(r)return console.log(r),void c(e,n)}),s.pipe(e)}(n,e,t):c(n,t)}):(n.status(422).send({message:t.messages.notWhitelisted}),Promise.resolve())}catch(e){return Promise.reject(e)}}};
//# sourceMappingURL=next-image-proxy.js.map
